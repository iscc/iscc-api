# generated by datamodel-codegen:
#   filename:  iscc-service-generator.yaml

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Field, constr


class IsccEmbeddable(BaseModel):
    """
    Metadata to be embedded into the digital asset.
    """

    creator: Optional[str] = Field(
        None,
        description="An entity primarily responsible for making the resource.",
        example="Joanne K. Rowling",
    )
    license: Optional[AnyUrl] = Field(
        None,
        description=(
            "URI of license for the identified *digital content*. **Supports URI template"
            " `{iscc-id}`**."
        ),
        example="https://example.com/license-terms-for-this-item",
    )
    acquire: Optional[AnyUrl] = Field(
        None,
        description=(
            "This field must contain a valid URL referring to a page showing information about how"
            " one can acquire a license for the item. This may be a page of a web shop or NFT"
            " marketplace ready for providing a license. **Supports URI template `{iscc-id}`**."
        ),
        example="https://example.com/buy-license-for-item-here",
    )
    credit: Optional[str] = Field(
        None,
        description=(
            "A line of text that you expect users of the image (such as Google Images) to display"
            " alongside the image."
        ),
        example="Frank Farian - Getty Images",
    )
    rights: Optional[str] = Field(
        None,
        description=(
            "Contains any necessary copyright notice and should identify the current owner of the"
            " copyright of this work with associated intellectual property rights."
        ),
        example="Â© Copyright 2022 ISCC Foundation - www.iscc.codes",
    )


class Chain(Enum):
    """
    The blockchain on wich the ISCC-CODE will be declared.
    """

    PRIVATE = "PRIVATE"
    BITCOIN = "BITCOIN"
    ETHEREUM = "ETHEREUM"
    POLYGON = "POLYGON"


class IsccId(BaseModel):
    """
    An ISCC-ID
    """

    iscc_id: Optional[AnyUrl] = Field(
        None,
        description="A globaly unique, owned ISCC-ID (unconfirmed)",
        example="ISCC:MEADJVWXP67HW7NI",
    )
    iscc_code: str = Field(
        ...,
        description="The ISCC-CODE from wich the ISCC-ID will be minted.",
        example="ISCC:KQDZJFP6WBM3IIFZ7CRXCNDCNUU3ZEWGL5HAKHNMYHLN2WULPN3ZFHJO7AUS6VQQVM7Q",
    )
    chain: Chain = Field(
        ...,
        description="The blockchain on wich the ISCC-CODE will be declared.",
        example="ETHEREUM",
    )
    wallet: str = Field(
        ...,
        description="The wallet-address that will sign the ISCC declaration.",
        example="0xb794f5ea0ba39494ce839613fffba74279579268",
    )
    counter: Optional[int] = Field(
        None, description="The uniqueness counter of the ISCC-ID.", example=2
    )


class Iscc(BaseModel):
    """
    ISCC Metadata
    """

    iscc: Optional[constr(regex=r"^ISCC:[A-Z2-7]{10,73}$", min_length=15, max_length=73)] = Field(
        None,
        description=(
            "An **ISCC-CODE** in canonical representation. This is the minimal required field for a"
            " valid ISCC Metadata object."
        ),
        example="ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HUWULUNRFE3BLHRSCXYH2M5AEGQY",
    )
    name: Optional[constr(min_length=1, max_length=128)] = Field(
        None,
        description=(
            "The title or name of the intangible creation manifested by the identified *digital"
            " content*. **Used as input for ISCC Meta-Code generation**."
        ),
        example="The Never Ending Story",
    )
    description: Optional[constr(min_length=1, max_length=1024)] = Field(
        None,
        description=(
            "Description of the *digital content* identified by the **ISCC**. **Used as input for"
            " ISCC Meta-Code generation**. Any user presentable text string (including Markdown"
            " text) indicative of the identity  of the referent may be used."
        ),
        example="a 1984 fantasy film co-written and directed by *Wolfgang Petersen*",
    )
    metadata: Optional[Union[Dict[str, Any], str]] = Field(
        None,
        description=(
            "Descriptive, industry-sector or use-case specific metadata. **Used as input for ISCC"
            " Meta-Code generation**. Can be any object that is JSON/JCS serializable. If"
            " `metadata` is provided it is used as an input for Meta-Code generation and as the"
            " sole input for the cryptographic `metahash` calculation. If `metadata` is set to a"
            " string it is assumed that it is base64 encoded binary file metadata."
        ),
    )
    embed: Optional[IsccEmbeddable] = None
    original: Optional[bool] = Field(
        None,
        description=(
            "The signee of the declaring transaction claims to be the original creator of the work"
            " manifested by the identified digital content."
        ),
        example=True,
    )
    verify: Optional[List[str]] = Field(
        None,
        description=(
            "A list of self-verifications. Self-verifications are public URLs under the"
            " account/authority of the signee. The verification URL must respond to a GET request"
            " with text that contains a multihash of the ISCC declaration signees wallet address in"
            " the format of `verifystart:<multihash-of-wallet-address>:verifyend`."
        ),
        example=["https://twitter.com/titusz/status/1490104312051257347"],
        max_items=128,
        min_items=1,
    )
    redirect: Optional[AnyUrl] = Field(
        None,
        description=(
            "URL to which a resolver should redirect an ISCC-ID that has been minted from a"
            " declartion that includes the IPFS-hash of this metadata instance. **Supports URI"
            " template `{iscc-id}`**."
        ),
        example="https://example.com/land-here-when-resolving-iscc-id",
    )
    tophash: Optional[constr(min_length=40)] = Field(
        None,
        description=(
            "A [Multihash](https://multiformats.io/multihash/) of the concatenation (binding) of"
            " metahash and datahash (default blake3)."
        ),
        example="bdyqnosmb56tqudeibogyygmf2b25xs7wpg4zux4zcts2v6llqmnj4ja",
    )
    metahash: Optional[constr(min_length=40)] = Field(
        None,
        description=(
            "A [Multihash](https://multiformats.io/multihash/) of the supplied metadata (default"
            " blake3). The hash is created from `name` and `description` fields or `properties` if"
            " supplied. For deterministic results [JSC"
            " RFC5452](https://datatracker.ietf.org/doc/html/rfc8785) canonicalization is applied"
            " to `properties` before hashing if it is a JSON object."
        ),
        example="bdyqed6bziei6w4j2eilfyrwjbk4pb7mtthesakh5nuuisrfsh72365q",
    )
    datahash: Optional[constr(min_length=40)] = Field(
        None,
        description=(
            "A [Multihash](https://multiformats.io/multihash/) of the *digital content* (default"
            " blake3)."
        ),
        example="bdyqk6e2jxh27tingubae32rw3teutg6lexe23qisw7gjve6k4qpteyq",
    )


class Nft(BaseModel):
    """
    An ISCC NFT package to be used for NFT minting
    """

    iscc: Optional[str] = Field(
        None,
        description="The ISCC-ID or ISCC-CODE for which to create an NFT Package",
        example="ISCC:MEADJVWXP67HW7NI",
    )
    iscc_code: Optional[str] = Field(
        None,
        description="ISCC-CODE to be passed to the ISCC declaration contract.",
        example="ISCC:KQDZJFP6WBM3IIFZ7CRXCNDCNUU3ZEWGL5HAKHNMYHLN2WULPN3ZFHJO7AUS6VQQVM7Q",
    )
    token_id: Optional[constr(regex=r"^(0|[1-9][0-9]*)$")] = Field(
        None,
        description=(
            "Token-ID to be passed to the NFT minting contract. (The Token-ID is an integer"
            " representation (uint256) of the `ipfs_metadata_cid` without the static CID prefix."
        ),
        example="24264217585278480942562880083667472973488514177954865383155936279336351816001166239115842587",
    )
    ipfs_metadata_cid: Optional[str] = Field(
        None,
        description="The IPFS CIDv1 of the NFT Metadata ",
        example="bafkreiez43ignrqddzxy5faretffft3zbx43of4jxarbvav6jrqdlyfvpm",
    )
    ipfs_metadata_payload: Optional[str] = Field(
        None,
        description="The base64-encoded payload of the metadata.",
        example="ew0KICAidmVyc2lvbiI6ICIwLTAtMCIsDQogICJpc2NjIjogIktFRFpLTkRFWlFWQ0tXSEtWNDdOQUE0RzZGRUg1UVlPR002SVNGSjNZVFEzUFJUUVhORkY3TVkiLA0KICAidGl0bGUiOiAiSVNDQyBMb2dvIiwNCiAgImZpbGVuYW1lIjogImlzY2MtbG9nby5wbmciLA0KICAiZmlsZXNpemUiOiAyODkyMiwNCiAgIm1lZGlhdHlwZSI6ICJpbWFnZS9wbmciLA0KICAidG9waGFzaCI6ICJkYzgyZWIzMjk4MzAyZGVhYjIyOTFhNzBkMDcxYTc1YWNmYjJmZTA2YTg0OWExZGNiYTU0YWMyMGYxYTI4Y2ZiIiwNCiAgIm1ldGFoYXNoIjogIjJhYjEzNjJhOTYyNDUzOTIzMzM3YTRhYTA1NTQ1N2U4Y2Q2ZGQ5MjVmNjIwYThlNzA2YmJjNmYzZDdjNTNkYmMiLA0KICAiZGF0YWhhc2giOiAiZTFiN2M2NzBiYjRhNWZiM2QzZjA1Zjc4NTRiMThiOTBkMDg1NmEzYmNlNDA3ZjM5ZGM4YzY5NjJlNTE3MWM3ZCIsDQogICJnbXQiOiAiaW1hZ2UiLA0KICAid2lkdGgiOiAxMTgyLA0KICAiaGVpZ2h0IjogMzczDQp9DQo=",
    )
    ipfs_image_cid: Optional[str] = Field(
        None,
        description="The IPFS CIDv1 of the NFT image.",
        example="bafybeihcck6iocb2steuf4zwq53nfyce34xamke5za7gaq2qqoshmgab6u",
    )
    ipfs_image_uri: Optional[AnyUrl] = Field(
        None,
        description=(
            "The URI to the NFT image (either a local relative URL or a Data-URI depending on"
            " server configuration)"
        ),
        example="/media/d8541cb6f21e952c2c532535c77ac145c09ee1e4184e7f4b19d07c836f83d16a",
    )
