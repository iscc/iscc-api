# generated by datamodel-codegen:
#   filename:  iscc.yaml
#   timestamp: 2022-01-01T20:09:19+00:00

from typing import Any, Dict, List, Optional

from pydantic import AnyUrl, BaseModel, Field


class Schema(BaseModel):
    """
    Schema for ISCC Metadata.
    """

    _context: Optional[AnyUrl] = Field(
        'https://purl.org/iscc/context/0.2.0.json',
        alias='@context',
        description='JSON-LD Context URI for ISCC metadata.',
    )
    type: Optional[AnyUrl] = 'https://purl.org/iscc/schema/0.2.0.json'
    iscc: AnyUrl = Field(
        ..., example='ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HUWULUNRFE3BLHRSCXYH2M5AEGQY'
    )
    name: Optional[str] = Field(
        None,
        description=(
            'The name or title of the intangible creation manifested by the idendified'
            ' digital  content.\n'
        ),
        example="Harry Potter and the Philosopher's Stone",
        max_length=128,
    )
    description: Optional[str] = Field(
        None,
        description=(
            'Description of the digital asset identified by the ISCC (used as input for'
            '  Meta-Code generation). Any user presentable text string (including'
            ' Markdown text)  indicative of the identity  of the referent may be'
            ' used.\n'
        ),
        max_length=1024,
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description=(
            'JSON or JSON-LD metadata for the digital content. This is the source for '
            ' determinstic calculation of the metahash.\n'
        ),
    )
    image: Optional[AnyUrl] = Field(
        None,
        description=(
            'URL for a user-presentable image that serves as a preview of identified'
            ' digital  content. The URI may be a Data-URL '
            ' [RFC2397](https://datatracker.ietf.org/doc/html/rfc2397). If this'
            ' metadata should  serve as NFT metadata according to  '
            ' [ERC-721](https://ethereum.org/en/developers/docs/standards/tokens/erc-721/)'
            ' or  [ERC-1155](https://ethereum.org/en/developers/docs/standards/tokens/erc-1155/)'
            '  the URI must reference the actual digital content represented by the'
            ' NFT.\n'
        ),
        example='https://picsum.photos/200/300.jpg',
    )
    keywords: Optional[List[str]] = Field(
        None,
        description='List of keywords relevant to the identified digital content.',
        min_items=1,
        uniqueItems=True,
    )
    identifier: Optional[List[AnyUrl]] = Field(
        None,
        context='https://purl.org/iscc/context/0.2.0/#identifier',
        description=(
            'Other identifier(s) referencing the work, product or other abstraction of'
            ' which  the referenced **digital content** is a full or partial'
            ' manifestation.\n'
        ),
    )
    filename: Optional[str] = Field(
        None,
        context='https://dbpedia.org/ontology/filename',
        description=(
            'Filename of the referenced **digital content** (automatically used as'
            ' fallback if \nthe `name` field was not specified for ISCC processing)\n'
        ),
    )
    filesize: Optional[int] = Field(
        None,
        context='https://dbpedia.org/ontology/fileSize',
        description='File size of media asset in number of bytes.',
        readOnly=True,
    )
    mediatype: Optional[str] = Field(
        None, context='encodingFormat', description='IANA Media Type (MIME type)'
    )
    tophash: Optional[str] = Field(
        None,
        context='https://purl.org/iscc/context/0.2.0/#tophash',
        description=(
            'Multihash of the concatenation (binding) of metahash and datahash"'
        ),
    )
    metahash: Optional[str] = Field(
        None,
        context='https://purl.org/iscc/context/0.2.0/#metahash',
        description='Multihash of the metadata associated with the *digital content*.',
    )
    datahash: Optional[str] = Field(
        None,
        context='https://purl.org/iscc/context/0.2.0/#datahash',
        description='Multihash hash of media file.',
    )
    duration: Optional[int] = Field(
        None, description='Duration of audio-visual media in secondes.'
    )
    fps: Optional[float] = Field(
        None,
        context='http://id.loc.gov/ontologies/bibframe/ProjectionSpeed',
        description='Frames per second of video assets.',
        example=24,
        ge=1.0,
    )
    width: Optional[int] = Field(
        None, description='Width of visual media in number of pixels.', example=640
    )
    height: Optional[int] = Field(
        None,
        description='Height of visual media in number of pixels.',
        example=480,
        ge=1.0,
    )
    characters: Optional[int] = Field(
        None,
        description=(
            'Number of text characters (code points after Unicode normalization)'
        ),
    )
    language: Optional[List[str]] = Field(
        None, description='Language(s) of content (BCP-47).'
    )
    parts: Optional[List[str]] = Field(None, description='Included Content-Codes.')
    license: Optional[AnyUrl] = Field(
        None, description='URI of license for the identified digital content.'
    )
    redirect: Optional[AnyUrl] = Field(
        None,
        description=(
            'URL to which a resolver should redirect an ISCC-ID that has been minted'
            ' from a  declartion that includes the IPFS-hash of this metadata'
            ' instance.\n'
        ),
    )
